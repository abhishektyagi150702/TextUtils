{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","prototypes","PropTypes","string","defaultProps","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","caretColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kOAIe,SAASA,EAAOC,GAC3B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACA,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,oBAA5L,SACE,sBAAMT,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BU,GAAG,yBAA7C,UACE,oBAAIV,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkBW,eAAa,OAAOT,KAAK,IAAxD,sBAUJ,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACE,uBAAOD,UAAU,mBAAmBY,QAASb,EAAMc,WAAYT,KAAK,WAAWM,GAAG,2BAClF,uBAAOV,UAAU,mBAAmBc,QAAQ,yBAA5C,yCASZhB,EAAOiB,WAAa,CAClBZ,MAAOa,IAAUC,QAEnBnB,EAAOoB,aAAc,CACnBf,MAAO,a,MCtCM,SAASgB,EAASpB,GAAQ,IAAD,EACdqB,mBAAS,mBADK,mBAC9BC,EAD8B,KACzBC,EADyB,KAmCtC,OACE,qCACA,sBAAKtB,UAAU,YAAf,UACE,qBAAIuB,MAAO,CAACC,MAAsB,UAAfzB,EAAME,KAAiB,QAAS,SAAnD,UAA8DF,EAAM0B,QAApE,OACA,sBAAKzB,UAAU,OAAf,UACE,0BAAWA,UAAU,oBAAoB0B,MAAOL,EAAMM,SAzBrC,SAACC,GAEtBN,EAAQM,EAAMC,OAAOH,QAuBgEH,MAAO,CAACO,gBAAgC,UAAf/B,EAAME,KAAiB,QAAS,OAAQuB,MAAqB,UAAdzB,EAAME,KAAgB,QAAQ,QAAS8B,WAAY,QAASrB,GAAG,QAAQsB,KAAK,MACrO,wBAAQ5B,KAAK,SAASJ,UAAU,uBAAuBY,QAvCvC,WAElB,IAAIqB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRlC,EAAMoC,UAAU,8BAA8B,YAmC5C,kCACA,wBAAQ/B,KAAK,SAASJ,UAAU,uBAAuBY,QAlCvC,WAEpB,IAAIqB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRlC,EAAMoC,UAAU,6BAA6B,YA8BzC,kCACA,wBAAQ/B,KAAK,SAASJ,UAAU,uBAAuBY,QAxBtC,WACfU,EAAQ,IACRvB,EAAMoC,UAAU,kBAAkB,YAsBpC,mBACA,wBAAQ/B,KAAK,SAASJ,UAAU,uBAAuBY,QArB3C,WAChB,IAAIS,EAAOgB,SAASC,eAAe,SACnCjB,EAAKkB,SACLC,UAAUC,UAAUC,UAAUrB,EAAKK,OACnC3B,EAAMoC,UAAU,iBAAiB,YAiB7B,uBACA,wBAAQ/B,KAAK,SAASJ,UAAU,uBAAuBY,QAhBrC,WACvB,IAAIqB,EAAUZ,EAAKsB,MAAM,QACzBrB,EAAQW,EAAQW,KAAK,MACrB7C,EAAMoC,UAAU,yBAAyB,YAapC,gCAGJ,sBAAKnC,UAAU,iBAAkBuB,MAAO,CAACC,MAAsB,UAAfzB,EAAME,KAAiB,QAAS,SAAhF,UACE,sDACA,mCAAMoB,EAAKsB,MAAM,KAAKE,OAAtB,aAAwCxB,EAAKwB,OAA7C,iBACA,8BAAI,KAAOxB,EAAKsB,MAAM,KAAKE,OAA3B,sBACA,yCACA,4BAAIxB,EAAKwB,OAAO,EAAExB,EAAK,qDCrDd,SAASyB,EAAM/C,GAM1B,OACIA,EAAMgD,OAAS,sBAAK/C,UAAS,sBAAiBD,EAAMgD,MAAM3C,KAA7B,gCAAiE4C,KAAK,QAApF,UACP,iCAPK,SAACC,GACf,IAAMC,EAAQD,EAAKb,cACnB,OAAOc,EAAMC,OAAO,GAAGjB,cAAgBgB,EAAME,MAAM,GAKhCC,CAAYtD,EAAMgD,MAAM3C,QAD3B,KAC8CL,EAAMgD,MAAMO,OCqClEC,MAvCf,WAAgB,IAAD,EACWnC,mBAAS,SADpB,mBACNnB,EADM,KACAuD,EADA,OAEapC,mBAAS,MAFtB,mBAEN2B,EAFM,KAECU,EAFD,KAGPtB,EAAY,SAACuB,EAAStD,GAC1BqD,EAAS,CACPH,IAAKI,EACLtD,KAAMA,IAECuD,YAAW,WACXF,EAAU,QACT,OAiBZ,OACE,qCACE,cAAC3D,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMY,WAfxB,WACJ,UAATZ,GACDuD,EAAQ,QACRnB,SAASuB,KAAKrC,MAAMO,gBAAkB,OACtCK,EAAU,6BAA6B,aAGvCqB,EAAQ,SACRnB,SAASuB,KAAKrC,MAAMO,gBAAkB,QACtCK,EAAU,8BAA8B,eAOxC,cAACW,EAAD,CAAOC,MAAOA,IACd,qBAAK/C,UAAU,iBAAf,SACE,cAACmB,EAAD,CAAUgB,UAAWA,EAAWV,QAAQ,4BAA4BxB,KAAMA,UC5BnE4D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1BuB,M","file":"static/js/main.67dfab20.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">About</a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototypes = {\r\n  title: PropTypes.string\r\n}\r\nNavbar.defaultProps ={\r\n  title: 'TextUtils'\r\n};","import React,{useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n   const [text,setText] = useState('Enter text here');\r\n   const handleUpClick =() => {\r\n      \r\n      let newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"Text converted to uppercase\",\"success\");\r\n   }\r\n   const handleLoClick =() => {\r\n      \r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text convertd to lowercase\",\"success\");\r\n }\r\n   \r\n   const handleOnChange =(event) => {\r\n    \r\n    setText(event.target.value);\r\n }\r\n const handleClearText = () => {\r\n          setText(\"\");\r\n          props.showAlert(\"Text is cleared\",\"success\");\r\n }\r\n const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text is copied\",\"success\");\r\n }\r\n const handleExtraSpace = () =>{\r\n   let newText = text.split(/[ ]+/);\r\n   setText(newText.join(\" \"));\r\n   props.showAlert(\"Extra space is removed\",\"success\");\r\n }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\">\r\n      <h1 style={{color: props.mode === 'light'?'black': 'white'}}>{props.heading} </h1>\r\n      <div className=\"mb-3\">\r\n        <textarea  className=\"form-control my-3\" value={text} onChange={handleOnChange}  style={{backgroundColor: props.mode === 'light'?'white': 'grey', color: props.mode=== 'light'?'black':'white', caretColor: 'auto'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleClearText}>Clear</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy text</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleExtraSpace}>Remove Space</button>\r\n        </div>\r\n    </div>\r\n    <div className=\"container my-4\"  style={{color: props.mode === 'light'?'black': 'white'}}>\r\n      <h3>This is text summary</h3>\r\n      <p>  {text.split(\" \").length} word and {text.length} characters</p>\r\n      <p>{0.0008*text.split(\" \").length} minutes to read</p>\r\n      <h3>Preview</h3>\r\n      <p>{text.length>0?text:\"Enter something in the text box to preview\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n   const capitalize =(word) => {\r\n       const lower = word.toLowerCase();\r\n       return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n   }    \r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{ capitalize (props.alert.type) }</strong>: {props.alert.msg}\r\n            </div>  \r\n        \r\n    )\r\n}\r\n","import Navbar from \"./components/Navbar\";\r\nimport \"./App.css\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport React, { useState } from 'react'\r\nimport Alert from \"./components/Alert\";\r\n\r\n// import About from \"./components/About\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n             setTimeout(()=> {\r\n             setAlert (null) ;}\r\n             ,1500\r\n\r\n             );\r\n      }\r\n  const toggleMode =() => {\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = \"grey\";\r\n      showAlert(\"Dark mode has been enabled\",\"success\");\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n    }\r\n  }\r\n \r\n  return (\r\n    <>\r\n      <Navbar title=\"TextUtlis\" mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\r\n        {/* <About /> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}